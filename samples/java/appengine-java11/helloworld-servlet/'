# Using the Java Agent on a Hello World Servlet on GAE Standard with Java 11

NOTE: This example was copied from
[appengine-java11/helloworld-servlet](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet)
and modified for Snapshot Debugger Java agent use.

The Java 11 runtime requires that your application have a `Main` class that
starts a web server. This sample is dependent on artifact
[`appengine-simple-jetty-main`](../appengine-simple-jetty-main) to provide a
`Main` class that starts an embedded Jetty server that loads a WAR file.

This example will use the App Engine Plugin to first build and stage the
application. Then per it will make some changes to add files to the staged
application before finally deploying it.

It will also demonstrate the use of the `cdbg_extra_class_path` option for the
Snapshot Debugger Java Agent.

## Setup

See [Prerequisites](../README.md#Prerequisites).

Ensure your current working directory is
`samples/java/appengine-java11/helloworld-server`, as all following instructions
assumes this.

- Note the `appengine-simple-jetty-main` dependency:
```
<dependency>
  <groupId>com.example.appengine.demo</groupId>
  <artifactId>simple-jetty-main</artifactId>
  <version>1</version>
  <scope>provided</scope>
</dependency>
```
**Note: this dependency needs to be installed locally.**

### Install dependency locally

Move into the directory to install, and then move back.

```
pushd ../appengine-simple-jetty-main
mvm install
popd
```

## Package your app:

First use the maven App Engine Plugin to build and stage the application.

```
mvn clean package appengine:stage
```

## Add the Snapshot Debugger Java Agent

Per [App Engine Staging
Directory](../README.md#app-engine-staging-directory-and-the-snapshot-debugger-java-agent)
we can add in the Snapshot Debugger Java Agent.

```
mkdir target/appengine-staging/cdbg
wget -qO- https://github.com/GoogleCloudPlatform/cloud-debug-java/releases/latest/download/cdbg_java_agent_gce.tar.gz | tar xvz -C target/appengine-staging/cdbg
```

## Extract the WAR file

As in this sample app the WAR gets extracted to a random temporary location by
Jetty, the Snapshot Debugger Java Agent will not be able to locate the class
file in order to set breakpoints. To enable it to do so, the WAR file needs to
be extracted to a known location that the agent can be configured to search for.

```
unzip target/appengine-staging/helloworld.war -d target/appengine-staging/cdbg/extra
```

## Deploy the application

Examine the app.yaml contents, which provides a custom entry point that
specifies the `-agentpath` java option to load the agent. Of special note is the
setting of the `cdbg_extra_class_path` option to tell the agent where the
application class file can be found:

TODO: Add in permanent code link for the app.yaml file.

This will deploy the contents of `target/appengine-staging`, with the contents
of the added cdbg directory unchanged:

```
gcloud app deploy target/appengine-staging/app.yaml
```

Make note of the following output entries, which should resemble the following:

```
[...snip]
target service:              [sample-java11-helloworld-servlet]
target version:              [20221122t182924]
target url:                  [https://<custom for your project>.appspot.com]
[...snip]
```


Then visit:  https://YOUR-PROJECT-ID.appspot.com/hello
